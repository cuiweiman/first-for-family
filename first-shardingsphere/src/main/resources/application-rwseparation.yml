#############################################################################################
# read-write-separation 读写分离
# mysql 主节点 3305
# mysql 从节点 3307, 3308
#############################################################################################



# Spring 配置
spring:
  # ShardingSphere 配置
  sharding-sphere:
    # 单机模式 Standalone 默认: 数据源和规则等元数据信息可以持久化，但无法同步到 ShardingSphere 实例
    # 集群模式 Cluster: 多个 ShardingSphere 实例之间的元数据共享和分数场景下状态协调的能力。用于生产环境。
    # https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/mode/
    mode:
      type: Standalone


    # 属性配置 https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/props/
    props:
      # 日志中 展示修改以后的sql语句
      sql-show: true
      # 初始化 各个数据源 的 任务处理线程池
      kernel-executor-size: 5
      # 一次查询请求在每个数据库实例中所能使用的最大连接数
      max-connections-size-per-query: 5


    # 数据源配置 https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/data-source/
    datasource:
      # 自定义 数据源名称
      names: master, follower1, follower2
      # 数据源 信息 配置
      master:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://${my-mysql.cs-host}:3306/db_user?serverTimezone=Asia/Shanghai&useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password: ${my-mysql.password}
      follower1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://${my-mysql.cs-host}:3307/db_user?serverTimezone=Asia/Shanghai&useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password: ${my-mysql.password}
      follower2:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://${my-mysql.cs-host}:3308/db_user?serverTimezone=Asia/Shanghai&useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password: ${my-mysql.password}

    rules:
      # 读写分离配置 https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/readwrite-splitting/
      readwrite-splitting:
        data-sources:
          myReadWriteDS:
            # 关联 读写分离的负载均衡算法
            load-balancer-name: my-weight
            # 静态数据源 staticStrategy 或 动态数据源 dynamicStrategy
            static-strategy:
              write-data-source-name: master
              read-data-source-names:
                - follower1
                - follower2

        # 读写分离负载均衡算法配置 https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/algorithm/
        loadBalancers:
          # 轮询配置 loadBalancerName 由用户指定，需要和读写分离规则中的 loadBalancerName 属性一致
          my-round:
            # type 和 props，请参考读写分离负载均衡内置算法：https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/load-balance/
            type: ROUND_ROBIN
          # 随机
          my-random:
            type: RANDOM
          # 权重
          my-weight:
            type: WEIGHT
            props:
              # 权重越大, 负载越高, 即处理的请求越多
              follower1: 1
              follower2: 2






